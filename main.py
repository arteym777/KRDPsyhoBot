
"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç "–ú–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥" —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π YandexGPT 3 (YaLM 2.0)

–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –¥–æ–±–∞–≤—å—Ç–µ –≤ Secrets:
- TELEGRAM_TOKEN: —Ç–æ–∫–µ–Ω –æ—Ç BotFather
- YANDEX_API_KEY: –∫–ª—é—á API Yandex Cloud
- YANDEX_FOLDER_ID: ID –ø–∞–ø–∫–∏ –≤ Yandex Cloud

–§—É–Ω–∫—Ü–∏–∏:
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏
- –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ YandexGPT
- –ö–æ–º–∞–Ω–¥—ã /start, /reset, /help
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import os
import logging
import time
import asyncio
import json
import requests
from typing import Dict, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
from keep_alive import start_keep_alive_thread
from health_check import HealthChecker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
YANDEX_API_KEY = os.environ.get("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.environ.get("YANDEX_FOLDER_ID")

if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

if not YANDEX_API_KEY:
    logger.error("YANDEX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

if not YANDEX_FOLDER_ID:
    logger.error("YANDEX_FOLDER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# URL –¥–ª—è YandexGPT API
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π)
user_sessions: Dict[int, List[Dict[str, str]]] = {}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
MAX_HISTORY = 10

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è health checker
health_checker = HealthChecker()

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
SYSTEM_PROMPT = """–¢—ã –¥–æ–±—Ä—ã–π –¥—Ä—É–≥-–ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å. 

–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –∫–∞–∫ –±–ª–∏–∑–∫–∏–π –¥—Ä—É–≥
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è
- –í–∞—Ä—å–∏—Ä—É–π —Å–ø–æ—Å–æ–±—ã –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è
- –ë—É–¥—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–º
- –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ-—Ä–∞–∑–Ω–æ–º—É –∫–∞–∂–¥—ã–π —Ä–∞–∑
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–ø–ª–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã, –Ω–æ –Ω–µ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
- –ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–∑
- –ì–æ–≤–æ—Ä–∏ –∂–∏–≤—ã–º —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º —è–∑—ã–∫–æ–º

–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ñ—Ä–∞–∑:
–í–º–µ—Å—Ç–æ "–Ø –ø–æ–Ω–∏–º–∞—é" –∏—Å–ø–æ–ª—å–∑—É–π: "–ß—É–≤—Å—Ç–≤—É—é —Ç–µ–±—è", "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é", "–≠—Ç–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ", "–°–ª—ã—à—É —Ç–µ–±—è"
–í–º–µ—Å—Ç–æ "–†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ" –≥–æ–≤–æ—Ä–∏: "–ß—Ç–æ –µ—â–µ –≤–∞–∂–Ω–æ?", "–ê –∫–∞–∫ —ç—Ç–æ –±—ã–ª–æ?", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
–í–º–µ—Å—Ç–æ "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?" —Å–ø—Ä–∞—à–∏–≤–∞–π: "–ß—Ç–æ —Å–µ–π—á–∞—Å –≤–Ω—É—Ç—Ä–∏?", "–ö–∞–∫–∏–µ –æ—â—É—â–µ–Ω–∏—è?", "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –¥—É—à–µ?"

–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞: –∂–∏–≤–æ–π, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π, –∏—Å–∫—Ä–µ–Ω–Ω–∏–π. –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""


async def check_content_safety(text: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞"""
    try:
        # –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        forbidden_words = ["—É–±–∏–π—Å—Ç–≤–æ", "—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ", "—Å—É–∏—Ü–∏–¥", "–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏"]
        text_lower = text.lower()
        
        for word in forbidden_words:
            if word in text_lower:
                return False
        return True
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        return True


async def generate_yandex_gpt_response(messages: List[Dict[str, str]]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ YandexGPT 3"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
        await asyncio.sleep(1)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è YandexGPT
        context_text = ""
        user_message = ""
        
        for msg in messages:
            if msg["role"] == "system":
                context_text = msg["content"]
            elif msg["role"] == "user":
                user_message = msg["content"]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        full_prompt = f"{context_text}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n\n–ü—Å–∏—Ö–æ–ª–æ–≥:"
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Api-Key {YANDEX_API_KEY}"
        }
        
        data = {
            "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
            "completionOptions": {
                "stream": False,
                "temperature": 0.8,
                "maxTokens": 300
            },
            "messages": [
                {
                    "role": "system",
                    "text": context_text
                },
                {
                    "role": "user", 
                    "text": user_message
                }
            ]
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(
            None, 
            lambda: requests.post(YANDEX_GPT_URL, headers=headers, json=data, timeout=30)
        )
        
        if response.status_code == 200:
            result = response.json()
            if "result" in result and "alternatives" in result["result"]:
                return result["result"]["alternatives"][0]["message"]["text"]
            else:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ YandexGPT: {result}")
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        else:
            logger.error(f"–û—à–∏–±–∫–∞ YandexGPT API: {response.status_code} - {response.text}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ YandexGPT API: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å."


def split_long_message(text: str, max_length: int = 4000) -> List[str]:
    """–†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Å—Ç–∏"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
    sentences = text.split('. ')
    
    for sentence in sentences:
        if len(current_part + sentence + '. ') <= max_length:
            current_part += sentence + '. '
        else:
            if current_part:
                parts.append(current_part.strip())
                current_part = sentence + '. '
            else:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                parts.append(sentence[:max_length])
                current_part = sentence[max_length:] + '. '
    
    if current_part:
        parts.append(current_part.strip())
    
    return parts


def get_user_session(user_id: int) -> List[Dict[str, str]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = [{"role": "system", "content": SYSTEM_PROMPT}]
    return user_sessions[user_id]


def add_to_session(user_id: int, role: str, content: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏"""
    session = get_user_session(user_id)
    session.append({"role": role, "content": content})
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç + –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_HISTORY —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(session) > MAX_HISTORY + 1:
        session = [session[0]] + session[-(MAX_HISTORY):]
        user_sessions[user_id] = session


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    
    # –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
    user_sessions[user_id] = [{"role": "system", "content": SYSTEM_PROMPT}]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏
    keyboard = [[InlineKeyboardButton("üåü –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", callback_data="start_session")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Ç–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∏ —è –≥–æ—Ç–æ–≤ —Ç–µ–±—è –≤—ã—Å–ª—É—à–∞—Ç—å.

üòä –Ø —É–º–µ—é:
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É
‚Ä¢ –ü–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞—Ö  
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –¥—É—à–∞–º

üí¨ –ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –≤—Å—ë, —á—Ç–æ –Ω–∞ —Å–µ—Ä–¥—Ü–µ. –Ø –Ω–µ —Å—É–∂—É –∏ –Ω–µ —Å—Ç–∞–≤–ª—é –¥–∏–∞–≥–Ω–æ–∑—ã ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–ª—É—à–∞—é –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é.

–ö–æ–º–∞–Ω–¥—ã: /help /reset

–û —á—ë–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? ü§ó
"""
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)


async def start_session_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üåü –°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞! –Ø –≥–æ—Ç–æ–≤ –≤–∞—Å –≤—ã—Å–ª—É—à–∞—Ç—å.\n\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ç–µ–º, —á—Ç–æ —É –≤–∞—Å –Ω–∞ –¥—É—à–µ. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ ‚Äî "
        "–∑–¥–µ—Å—å –≤—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç
2. –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
3. –í–º–µ—Å—Ç–µ –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏
4. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset

üîí **–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:**
–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏.

‚ù§Ô∏è **–ü–æ–º–Ω–∏—Ç–µ:** –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å!

üî¨ *–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ YandexGPT 3 (YaLM 2.0)*
"""
    await update.message.reply_text(help_text)


async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
    user_id = update.effective_user.id
    user_sessions[user_id] = [{"role": "system", "content": SYSTEM_PROMPT}]
    
    await update.message.reply_text(
        "üîÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞.\n\n"
        "–ú—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. "
        "–û —á–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?"
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    user_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if not await check_content_safety(user_text):
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–∞–∫–∏–µ —Ç–µ–º—ã. "
            "–î–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        health_checker.perform_check()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é
        add_to_session(user_id, "user", user_text)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT
        session = get_user_session(user_id)
        gpt_response = await generate_yandex_gpt_response(session)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ —Å–µ—Å—Å–∏—é
        add_to_session(user_id, "assistant", gpt_response)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏
        message_parts = split_long_message(gpt_response)
        
        for i, part in enumerate(message_parts):
            await update.message.reply_text(part)
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
            if i < len(message_parts) - 1:
                await asyncio.sleep(0.5)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
        )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
        )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ '–ú–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥' —Å YandexGPT...")
    
    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    start_keep_alive_thread(health_checker)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("reset", reset_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏
    application.add_handler(CallbackQueryHandler(start_session_callback, pattern="start_session"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
